#!/bin/bash

# installer for Francois Scheurer's HOWTO - BASH AUDIT / COMMAND LOGGER
# http://www.pointsoftware.ch/en/howto-bash-audit-command-logger

### step 1

echo "creating /etc/bash-franzi"
cat <<'EOF1' |sudo tee /etc/bash-franzi >/dev/null
##Pointsoftware AG, 2013-11-03; created by francois scheurer
##http://www.pointsoftware.ch/en/howto-bash-audit-command-logger
if [ "${SHELL##*/}" != "bash" ]; then
  return
fi
##to avoid sourcing this file more than once
if [ -n "${OSTYPE##solaris*}" ]; then #following not working in solaris
  #do not source this file twice; also do not source it if we are in bash-franzi-forcecommand.sh, source it later from "-bash-li"
  #if we would source it from bash-franzi-forcecommand.sh, the environment would be lost after the call of 'exec -l bash -li' 
  if [ "$AUDIT_INCLUDED" == "$$" ] || { [ -z "$SSH_ORIGINAL_COMMAND" ] && [ "$(cat /proc/$$/cmdline |tr -d '\0')" == 'bash-c"/etc/bash-franzi-forcecommand.sh"' ]; }; then
    return
  else
    declare -rx AUDIT_INCLUDED="$$"
  fi
fi
##'history' options
declare -rx HISTFILE="$HOME/.bash_history"
declare -rx HISTSIZE=500000                                 #nbr of cmds in memory
declare -rx HISTFILESIZE=500000                             #nbr of cmds on file
declare -rx HISTCONTROL=""                                  #does not ignore spaces or duplicates
declare -rx HISTIGNORE=""                                   #does not ignore patterns
declare -rx HISTCMD                                         #history line number
##following line is commented to avoid following issue: loading the history during the sourcing of this file (non-interactive bash) is also loading history lines that begin with '#', but then during the trap DEBUG calls it reloads the whole history without '#'-lines and produces an double-length history.
#history -r                                                  #to reload history from file if a prior HISTSIZE has truncated it
##following 2 lines commented because 'history -r' was still loading '#'-lines
#shopt -s extglob                                            #enable extended pattern matching operators
#HISTIGNORE="*([ \t])#*"; history -r                         #reload history without commented lines; this force non-interactive bash to behave like interactive bash, without this AUDIT_HISTLINE will get a wrong initial value, leading then to a small issue where empty bash sessions are actually logging the last command of history
if [ -n "${OSTYPE##solaris*}" ]; then #following not working in solaris
  if groups | grep -q root; then
    declare -x TMOUT=43200                                    #timeout for root's sessions
    chattr +a "$HISTFILE"                                     #set append-only
  fi
fi
shopt -s histappend
shopt -s cmdhist
##history substitution ask for a confirmation
shopt -s histverify
##add timestamps in history - obsoleted with logger/syslog
##'http://www.thegeekstuff.com/2008/08/15-examples-to-master-linux-command-line-history/#more-130'
#declare -rx HISTTIMEFORMAT='%F %T '
##enable forward search ('ctrl-s')
##'http://ruslanspivak.com/2010/11/25/bash-history-incremental-search-forward/'
##enable flow control
#if shopt -q login_shell && [ -t 0 ]; then
#  stty -ixon
#fi
##bash audit & traceability
declare -rx AUDIT_LOGINUSER="$(who -mu | awk '{print $1}')"
declare -rx AUDIT_LOGINPID="$(who -mu | awk '{print $6}')"
declare -rx AUDIT_USER="$USER"                              #defined by pam during su/sudo
declare -rx AUDIT_PID="$$"
declare -rx AUDIT_TTY="$(who -mu | awk '{print $2}')"
#declare -rx AUDIT_SSH="$([ -n "$SSH_CONNECTION" ] && echo "$SSH_CONNECTION" | awk '{print $1":"$2"->"$3":"$4}')"
declare -rx AUDIT_SSH="$([ -n "$SSH_CONNECTION" ] && echo "$SSH_CONNECTION" | awk '{print " from "$1}')"
#declare -rx AUDIT_STR="[audit $AUDIT_LOGINUSER/$AUDIT_LOGINPID as $AUDIT_USER/$AUDIT_PID on $AUDIT_TTY/$AUDIT_SSH]"
declare -rx AUDIT_STR="[audit $AUDIT_LOGINUSER as $AUDIT_USER$AUDIT_SSH]"
declare -x AUDIT_LASTHISTLINE=""                            #to avoid logging the same line twice
declare -rx AUDIT_SYSLOG="1"                                #to use a local syslogd
##the logging at each execution of command is performed with a trap DEBUG function
##and having set the required history options (HISTCONTROL, HISTIGNORE)
##and to disable the trap in functions, command substitutions or subshells.
##it turns out that this solution is simple and works well with piped commands, subshells, aborted commands with 'ctrl-c', etc..
set +o functrace                                            #disable trap DEBUG inherited in functions, command substitutions or subshells, normally the default setting already
shopt -s extglob                                            #enable extended pattern matching operators
function AUDIT_DEBUG() {
  if [ -z "$AUDIT_LASTHISTLINE" ]; then                     #initialization
    local AUDIT_CMD="$(fc -l -1 -1)"                        #previous history command
    AUDIT_LASTHISTLINE="${AUDIT_CMD%%+([^ 0-9])*}"
  else
    AUDIT_LASTHISTLINE="$AUDIT_HISTLINE"
  fi
  local AUDIT_CMD="$(history 1)"                            #current history command
  AUDIT_HISTLINE="${AUDIT_CMD%%+([^ 0-9])*}"
  if [ "${AUDIT_HISTLINE:-0}" -ne "${AUDIT_LASTHISTLINE:-0}" ] || [ "${AUDIT_HISTLINE:-0}" -eq "1" ]; then  #avoid logging unexecuted commands after 'ctrl-c', 'empty+enter', or after 'ctrl-d'
    echo -ne "${_backnone}${_frontgrey}"                    #disable prompt colors for the command's output
    ##remove in last history cmd its line number (if any) and send to syslog
    if [ -n "$AUDIT_SYSLOG" ]; then
      if ! logger -p user.info -t "$AUDIT_STR $PWD" "${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}"; then
        echo error "$AUDIT_STR $PWD" "${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}"
      fi
    else
      echo $( date +%F_%H:%M:%S ) "$AUDIT_STR $PWD" "${AUDIT_CMD##*( )?(+([0-9])?(\*)+( ))}" >>/var/log/bash.log
    fi
    #echo "===cmd:$BASH_COMMAND/subshell:$BASH_SUBSHELL/fc:$(fc -l -1)/history:$(history 1)/histline:${AUDIT_CMD%%+([^ 0-9])*}/last_histline:${AUDIT_LASTHISTLINE}===" #for debugging
    return 0
  else
    return 1
  fi
}
##audit the session closing
function AUDIT_EXIT() {
  local AUDIT_STATUS="$?"
  if [ -n "$AUDIT_SYSLOG" ]; then
    logger -p user.info -t "$AUDIT_STR" "#=== session closed ==="
  else
    echo $( date +%F_%H:%M:%S ) "$AUDIT_STR" "#=== session closed ===" >>/var/log/bash.log
  fi
  exit "$AUDIT_STATUS"
}
##make audit trap functions readonly; disable trap DEBUG inherited (normally the default setting already)
declare -frx +t AUDIT_DEBUG
declare -frx +t AUDIT_EXIT
##audit the session opening
if [ -n "$AUDIT_SYSLOG" ]; then
  logger -p user.info -t "$AUDIT_STR" "#=== session opened ===" #audit the session openning
else
  echo $( date +%F_%H:%M:%S ) "$AUDIT_STR" "#=== session opened ===" >>/var/log/bash.log
fi
##clear prior $PROMPT_COMMAND (in particular, "history -a" breaks the logging)
PROMPT_COMMAND=true
##8 lines below copied from .bashrc
## If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND=$PROMPT_COMMAND'; echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac
##when a bash command is executed it launches first the AUDIT_DEBUG(),
##then the trap DEBUG is disabled to avoid a useless rerun of AUDIT_DEBUG() during the execution of pipes-commands;
##at the end, when the prompt is displayed, re-enable the trap DEBUG
	##declare -rx PROMPT_COMMAND="AUDIT_DONE=; trap 'AUDIT_DEBUG && AUDIT_DONE=1; trap DEBUG' DEBUG; [ -n \"\$AUDIT_DONE\" ] && echo '-----------------------------'"
	##NOK: declare -rx PROMPT_COMMAND="echo "-----------------------------"; trap 'AUDIT_DEBUG; trap DEBUG' DEBUG; echo '-----------------------------'"
	##OK:  declare -rx PROMPT_COMMAND="echo "-----------------------------"; trap 'AUDIT_DEBUG; trap DEBUG' DEBUG"
#declare -rx PROMPT_COMMAND="[ -n \"\$AUDIT_DONE\" ] && echo '-----------------------------'; AUDIT_DONE=; trap 'AUDIT_DEBUG && AUDIT_DONE=1; trap DEBUG' DEBUG"
declare -rx PROMPT_COMMAND="if [ \$? -ne 0 ]; then ERROR_FLAG=1; else ERROR_FLAG=; fi;"$PROMPT_COMMAND"; trap 'AUDIT_DEBUG; trap DEBUG' DEBUG;"
declare -rx BASH_COMMAND                                    #current command executed by user or a trap
declare -rx SHELLOPT                                        #shell options, like functrace
trap AUDIT_EXIT EXIT                                        #audit the session closing
##recheck the window's size after every command:
shopt -s checkwinsize
##force to recheck window's size: kill -WINCH $$
##set it manually, e.g.: stty rows 24 columns 80
##verify with: set | egrep ‘(COLUMNS|LINES)’
##or with: stty size
EOF1
sudo chown root:root /etc/bash-franzi
sudo chmod 644 /etc/bash-franzi

### step 2

for i in /etc/skel/.bashrc /root/.bashrc /home/*/.bashrc; do
  if ! sudo grep -q ". /etc/bash-franzi" "$i"; then
    echo "updating $i"
    echo "[ -f /etc/bash-franzi ] && . /etc/bash-franzi #added by francois scheurer" |sudo tee -a "$i" >/dev/null
  fi
done

### step 3

echo "creating /etc/rsyslog.d/45-bash-franzi.conf"
cat <<'EOF3' |sudo tee /etc/rsyslog.d/45-bash-franzi.conf >/dev/null
##Pointsoftware AG, 2013-11-03; created by francois scheurer
##http://www.pointsoftware.ch/en/howto-bash-audit-command-logger
##Filter duplicated messages
$RepeatedMsgReduction off
##Enable high precision timestamps
#$ActionFileDefaultTemplate RSYSLOG_FileFormat
##Log bash audit generated log messages to file (note '[audit ' below will not work)
if $syslogfacility-text == 'user' and $syslogseverity-text == 'info' and $syslogtag startswith '[audit' then /var/log/bash.log
##then drop them
& ~
##'http://content.hccfl.edu/pollock/aunix2/logging.htm'
##'http://www.rsyslog.com/doc/rsyslog_conf_filter.html'
EOF3
sudo service rsyslog restart >/dev/null

### step 4

echo "creating /etc/bash-franzi-forcecommand.sh"
cat <<'EOF4' |sudo tee /etc/bash-franzi-forcecommand.sh >/dev/null
#!/bin/bash 
##Pointsoftware AG, 2013-11-03; created by francois scheurer
##http://www.pointsoftware.ch/en/howto-bash-audit-command-logger
if [ -n "${SSH_ORIGINAL_COMMAND}" ]
then
  ##audit SSH commands bypassing the bash (ssh -c/SCP/SFTP)
  declare -rx AUDIT_LOGINUSER="$(who -mu | awk '{print $1}')"
  declare -rx AUDIT_LOGINPID="$(who -mu | awk '{print $6}')"
  declare -rx AUDIT_USER="$USER"                              #defined by pam during su/sudo
  declare -rx AUDIT_PID="$$"
  declare -rx AUDIT_TTY="$(who -mu | awk '{print $2}')"
  #declare -rx AUDIT_SSH="$([ -n "$SSH_CONNECTION" ] && echo "$SSH_CONNECTION" | awk '{print $1":"$2"->"$3":"$4}')"
  declare -rx AUDIT_SSH="$([ -n "$SSH_CONNECTION" ] && echo "$SSH_CONNECTION" | awk '{print " from "$1}')"
  #declare -rx AUDIT_STR="[audit $AUDIT_LOGINUSER/$AUDIT_LOGINPID as $AUDIT_USER/$AUDIT_PID on $AUDIT_TTY/$AUDIT_SSH]"
  declare -rx AUDIT_STR="[audit $AUDIT_LOGINUSER as $AUDIT_USER$AUDIT_SSH]"
  declare -rx AUDIT_SYSLOG="1"                                #to use a local syslogd
  if [ -n "$AUDIT_SYSLOG" ]
  then
    logger -p user.info -t "$AUDIT_STR $PWD" "${SSH_ORIGINAL_COMMAND}"
  else
    echo $( date +%F_%H:%M:%S ) "$AUDIT_STR $PWD" "${SSH_ORIGINAL_COMMAND}" >>/var/log/bash.log
  fi
  exec bash -c "${SSH_ORIGINAL_COMMAND}"
else
  exec -l bash --init-file /etc/bash-franzi -li
fi
EOF4
sudo chown root:root /etc/bash-franzi-forcecommand.sh
sudo chmod 755 /etc/bash-franzi-forcecommand.sh
if ! sudo grep -q "/etc/bash-franzi-forcecommand.sh" /etc/ssh/sshd_config; then
  echo "updating /etc/ssh/sshd_config"
  echo 'ForceCommand "/etc/bash-franzi-forcecommand.sh"' |sudo tee -a /etc/ssh/sshd_config >/dev/null
  sudo service ssh reload
fi

### step 5

echo "creating /var/log/bash.log" 
sudo mkdir -p  /var/log/
sudo touch     /var/log/bash.log
sudo chown syslog:adm /var/log/bash.log
sudo chmod 640        /var/log/bash.log
##log rotation
if ! sudo grep -q "/var/log/bash.log" /etc/logrotate.d/rsyslog; then
  echo "updating /etc/logrotate.d/rsyslog"
  #sudo sed --in-place 's|/var/log/auth.log|&\n/var/log/bash.log|' /etc/logrotate.d/rsyslog
  printf '\n/var/log/bash.log\n{\n\trotate 600\n\tmonthly\n\tmissingok\n\tnotifempty\n\tcompress\n\tdelaycompress\n\tsharedscripts\n\tpostrotate\n\t\treload rsyslog >/dev/null 2>&1 || true\n\tendscript\n}\n' |sudo tee -a /etc/logrotate.d/rsyslog >/dev/null
fi
